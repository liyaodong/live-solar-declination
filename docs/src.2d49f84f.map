{"version":3,"sources":["index.js"],"names":["lineBetween","B","A","coords","N","m","lt","lg","i","push","unshift","rotateEarth","before","needAnim","requestAnimationFrame","animate","now","c","earth","getPosition","elapsed","setCenter","calcDeclination","Math","cos","PI","n","initialize","options","atmosphere","center","sky","zoom","WE","map","tileLayer","minZoom","maxZoom","attribution","addTo","polygon","cancelRotate","$","on","e","currentTarget","checked","window","onload"],"mappings":";AAAA;;AAEA;AACA,IAAMA,cAAc,SAAdA,WAAc,CAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/B,QAAIC,SAAS,EAAb;;AAEA,QAAMC,IAAI,GAAV;;AAEA,QAAMC,IAAI,CAACH,EAAEI,EAAF,GAAOJ,EAAEK,EAAV,KAAiBN,EAAEK,EAAF,GAAOL,EAAEM,EAA1B,CAAV;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,CAApB,EAAuB,EAAEI,CAAzB,EAA4B;AACxB,YAAMF,KAAKJ,EAAEI,EAAF,GAAOE,IAAIJ,CAAJ,IAASF,EAAEI,EAAF,GAAOL,EAAEK,EAAlB,CAAlB;AACA,YAAMC,KAAKL,EAAEK,EAAF,GAAOC,IAAIJ,CAAJ,IAASF,EAAEK,EAAF,GAAON,EAAEM,EAAlB,CAAlB;;AAEAJ,eAAOM,IAAP,CAAY,CAACH,EAAD,EAAKC,EAAL,CAAZ;AACAJ,eAAOO,OAAP,CAAe,CAACJ,EAAD,EAAKC,EAAL,CAAf;AACH;;AAED,WAAOJ,MAAP;AACH,CAfD;;AAiBA;AACA,IAAMQ,cAAc,SAAdA,WAAc,QAAS;AACzB,QAAIC,SAAS,IAAb;AACA,QAAIC,WAAW,IAAf;;AAEAC,0BAAsB,SAASC,OAAT,GAA0B;AAAA,YAATC,GAAS,uEAAH,CAAG;;AAC5C,YAAI,CAACH,QAAL,EAAe;AACX;AACH;;AAED,YAAMI,IAAIC,MAAMC,WAAN,EAAV;AACA,YAAMC,UAAUR,SAASI,MAAMJ,MAAf,GAAwB,CAAxC;AACAA,iBAASI,GAAT;AACAE,cAAMG,SAAN,CAAgB,CAACJ,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,IAAO,OAAOG,UAAU,EAAjB,CAAd,CAAhB;AACAN,8BAAsBC,OAAtB;AACH,KAVD;;AAYA,WAAO,YAAM;AACTF,mBAAW,KAAX;AACH,KAFD;AAGH,CAnBD;;AAqBA,IAAMS,kBAAkB,SAAlBA,eAAkB,YAAa;AACjC,WAAO;AAAA,eAAa,CAAC,KAAD,GAASC,KAAKC,GAAL,CAAS,IAAID,KAAKE,EAAT,GAAc,GAAd,IAAqBC,IAAI,EAAzB,CAAT,CAAtB;AAAA,KAAP;AACH,CAFD;;AAIA,SAASC,UAAT,GAAsB;AAClB,QAAMC,UAAU;AACZC,oBAAY,IADA;AAEZC,gBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFI;AAGZC,aAAK,IAHO;AAIZC,cAAM;AAJM,KAAhB;;AAOA,QAAMd,QAAQ,IAAIe,GAAGC,GAAP,CAAW,WAAX,EAAwBN,OAAxB,CAAd;;AAEAK,OAAGE,SAAH,CAAa,qDAAb,EAAoE;AAChEC,iBAAS,CADuD;AAEhEC,iBAAS,CAFuD;AAGhEC,qBAAa;AAHmD,KAApE,EAIGC,KAJH,CAISrB,KAJT;;AAMA,QAAMhB,IAAI,EAAEI,IAAI,OAAN,EAAeC,IAAI,CAAC,OAApB,EAAV;AACA,QAAMN,IAAI,EAAEK,IAAI,OAAN,EAAeC,IAAI,OAAnB,EAAV;;AAEA0B,OAAGO,OAAH,CAAWxC,YAAYC,CAAZ,EAAeC,CAAf,CAAX,EAA8BqC,KAA9B,CAAoCrB,KAApC;;AAEA,QAAIuB,eAAe9B,YAAYO,KAAZ,CAAnB;;AAEAwB,MAAE,gBAAF,EAAoBC,EAApB,CAAuB,QAAvB,EAAiC,aAAK;AAClC,YAAIC,EAAEC,aAAF,CAAgBC,OAApB,EAA6B;AACzBL,2BAAe9B,YAAYO,KAAZ,CAAf;AACH,SAFD,MAEO;AACHuB;AACH;AACJ,KAND;AAOH;;AAEDM,OAAOC,MAAP,GAAgBrB,UAAhB","file":"src.2d49f84f.map","sourceRoot":"../src","sourcesContent":["// will add javascript bundler for avoid global scope issue\n\n// draw a line betwen two position\nconst lineBetween = function(B, A) {\n    let coords = [];\n\n    const N = 100;\n\n    const m = (A.lt - A.lg) / (B.lt - B.lg);\n    for (let i = 0; i < N; ++i) {\n        const lt = A.lt - i / N * (A.lt - B.lt);\n        const lg = A.lg - i / N * (A.lg - B.lg);\n\n        coords.push([lt, lg]);\n        coords.unshift([lt, lg]);\n    }\n\n    return coords;\n};\n\n// Start a simple rotation animation\nconst rotateEarth = earth => {\n    let before = null;\n    let needAnim = true;\n\n    requestAnimationFrame(function animate(now = 0) {\n        if (!needAnim) {\n            return;\n        }\n\n        const c = earth.getPosition();\n        const elapsed = before ? now - before : 0;\n        before = now;\n        earth.setCenter([c[0], c[1] + 0.1 * (elapsed / 30)]);\n        requestAnimationFrame(animate);\n    });\n\n    return () => {\n        needAnim = false;\n    };\n};\n\nconst calcDeclination = dayOfYear => {\n    return dayOfYear => -23.44 * Math.cos(2 * Math.PI / 365 * (n + 10));\n};\n\nfunction initialize() {\n    const options = {\n        atmosphere: true,\n        center: [0, 0],\n        sky: true,\n        zoom: 3,\n    };\n\n    const earth = new WE.map('earth_div', options);\n\n    WE.tileLayer('http://tileserver.maptiler.com/nasa/{z}/{x}/{y}.jpg', {\n        minZoom: 0,\n        maxZoom: 5,\n        attribution: 'NASA',\n    }).addTo(earth);\n\n    const A = { lt: 40.7306, lg: -73.9352 };\n    const B = { lt: 47.4979, lg: 19.0402 };\n\n    WE.polygon(lineBetween(B, A)).addTo(earth);\n\n    let cancelRotate = rotateEarth(earth);\n\n    $('#option-rotate').on('change', e => {\n        if (e.currentTarget.checked) {\n            cancelRotate = rotateEarth(earth);\n        } else {\n            cancelRotate();\n        }\n    });\n}\n\nwindow.onload = initialize;\n"]}